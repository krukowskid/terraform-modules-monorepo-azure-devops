stages:
- stage: release
  dependsOn: detect
  condition: and(succeeded(), ne(dependencies.detect.outputs['detect.check_labels.labelOutput'], 'no-release'), eq(variables.isMaster, true))
  variables:
    releases: $[ stageDependencies.detect.detect.outputs['plan.releases'] ]
    pullRequestId: $[ stageDependencies.detect.detect.outputs['get_pr_number.prId'] ]
    pullRequestTitle: $[ stageDependencies.detect.detect.outputs['plan.prTitle'] ]
    changelogEntry: $[ stageDependencies.detect.detect.outputs['plan.changelogEntry'] ]
  jobs:
  - job: release
    steps:
    - checkout: self
      persistCredentials: true
      
    - pwsh: |
        $payload = '$(releases)' | convertfrom-json

        $date = Get-Date -Format dd-MM-yyyy

        $message = "($date) PR #$(pullRequestId) - $(pullRequestTitle)"
        $description = "- $(changelogEntry)"

        git config --global user.email "build@sdncenter.pl"
        git config --global user.name "Project Collection Build Service (sdncenterspzoo)"

        $payload.releases | ForEach-Object {
            $branchName = "tmp_$($_.module)_$($_.new)"
            $tag = "$($_.module)/$($_.new)"
            $module = $($_.module)
            $previousTag = "$($_.module)/$($_.previous)"
            $major = $($_.new).Substring(1).Split('.')[0]
            $minor = $($_.new).Substring(1).Split('.')[1]
            $majorTag = "$($module)/v$($major)"
            $minorTag = "$($module)/v$($major).$($minor)"

            git checkout "$($payload.sha)"
            
            write-host "module: $module"
            
            Copy-Item -Path $module `
                    -Destination "./_workingtmp/" `
                    -Recurse `
                    -Force

            if (git tag -l "$previousTag")
            {
                git checkout "$previousTag"
            }

            git checkout -b "$branchName"

            Get-ChildItem -Exclude "_workingtmp" `
                | Remove-Item -Recurse `
                              -Force

            Copy-Item -Path "_workingtmp/*" `
                    -Destination ./ `
                    -Recurse `
                    -Force

            Remove-Item -LiteralPath "_workingtmp" `
                        -Force `
                        -Recurse

            git rm -r ".pipelines"
            git rm ".gitignore"
            git rm ".tflint.hcl"

            git add .
            git commit -a -m "$message" -m "$description"
            git tag "$tag" -m "$message" -m "$description"
            git tag -fa "$majorTag" -m "$message" -m "$description"
            git tag -fa "$minorTag" -m "$message" -m "$description"
            git push origin "$tag"
            git push origin "$minorTag" -f
            git push origin "$majorTag" -f
            git checkout $env:BUILD_SOURCEVERSION
        }
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      displayName: Tag and publish new versions üöÄ

  - job: wiki
    strategy:
      matrix: $[ stageDependencies.detect.detect.outputs['plan.changedModules'] ]
      maxParallel: 1
    variables:
      pullRequestId: $[ stageDependencies.detect.detect.outputs['get_pr_number.prId'] ]
      pullRequestTitle: $[ stageDependencies.detect.detect.outputs['plan.prTitle'] ]
      changelogEntry: $[ stageDependencies.detect.detect.outputs['plan.changelogEntry'] ]
    steps:
    - checkout: self

    - bash: |
        wget https://github.com/terraform-docs/terraform-docs/releases/download/v0.15.0/terraform-docs-v0.15.0-linux-amd64.tar.gz \
          --output-document - \
          --progress dot:mega \
        | tar -xvz
      displayName: Install terraform-docs üîß

    - pwsh: |
        $version = (('$(releases)' | convertfrom-json).releases | where-object {$_.module -eq "$(module)"}).new
        mkdir $(module)/output
        $intro = @"
        [[_TOC_]]

        # Module Location
        To use this module in your Terraform, use the below source value.
        ``````hcl
        module "$(module)" {
          source = "git::$($env:BUILD_REPOSITORY_URI)?ref=$(module)/$version"
          # also any inputs for the module (see below)
        }
        ``````

        # Module Attributes
        "@ 
        $intro | Out-File "$(module)/output/documentation.md"

        $currentDir = (Get-Location).Path

        ./terraform-docs markdown table `
          --output-file "$currentDir/$(module)/output/documentation.md" `
          --sort-by required '$(module)'
      displayName: Generate docs ‚úç

    - pwsh: |
        $rootPageName = "$($env:BUILD_REPOSITORY_NAME)"

        $version = (('$(releases)' | convertfrom-json).releases | where-object {$_.module -eq "$(module)"}).new
        $docs = get-content -raw "$(module)/output/documentation.md" | Out-String 
        $wikiName = ('{0}.wiki' -f $($env:SYSTEM_TEAMPROJECT))
        $headers = @{ Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN" }

        try {
          $rootPageParams = @{
            'Uri'         = "$env:SYSTEM_TEAMFOUNDATIONSERVERURI$env:SYSTEM_TEAMPROJECT/_apis/wiki/wikis/$wikiName/pages?path=$rootPageName&api-version=5.1"
            'Headers'     = $headers
            'Method'      = 'PUT'
            'ContentType' = 'application/json; charset=utf-8'
            'body'        =  @{content = "[[_TOSP_]]"} | ConvertTo-Json -Compress 
          }

          Invoke-RestMethod @rootPageParams
        }
        catch {}

        $uri = "$env:SYSTEM_TEAMFOUNDATIONSERVERURI$env:SYSTEM_TEAMPROJECT/_apis/wiki/wikis/$wikiName/pages?path=$rootPageName/$(module)&comment=$(module)`@$($version)&api-version=5.1"

        try {
          $wikiPage = Invoke-WebRequest "$($uri)&includecontent=true" -Method GET -Headers $headers
          $etag = $wikiPage.Headers.ETag
          $content = ($wikiPage.content | convertfrom-json).content
          $headers.Add("If-Match", "$etag")
        }
        catch {
            if (($_.ErrorDetails.Message | ConvertFrom-Json).typeKey -ne "WikiPageNotFoundException") {
                $_
                exit 1
            }
        }

        $prUrl = "$env:SYSTEM_TEAMFOUNDATIONSERVERURI$env:SYSTEM_TEAMPROJECT/_git/$($env:BUILD_REPOSITORY_NAME)/pullrequest/$(pullRequestId)"

        $date = Get-Date -Format dd-MM-yyyy
        
        $changelog = @"
        
        # Changelog
        <!-- CHANGELOG -->
        ## $version ($date)
        * PR [#$(pullRequestId)]($($prUrl)) - $(pullRequestTitle)
        ``````
        $(changelogEntry)
        ``````
        "@

        if ($content -like "*<!-- CHANGELOG -->*") {
          $existingChangelog = ($content -split ("<!-- CHANGELOG -->"))[1]

          if ($existingChangelog -like "*## $version*") {
            $errorMessage = "Changelog for version $version already exists."
            Write-Error $errorMessage
            Write-Host "##vso[task.logissue type=error]$errorMessage"
            Write-Host "##vso[task.complete result=Failed;]$errorMessage"
          }

          $changelog = @"
        $changelog
        $existingChangelog
        "@
        }
        
        $page = $docs -replace "(?s)(?<=!-- END_TF_DOCS -->).+?","$changelog"
        $markdown = @{content = $page } | ConvertTo-Json -Compress 

        $params = @{
            'Uri'         = $uri
            'Headers'     = $headers
            'Method'      = 'PUT'
            'ContentType' = 'application/json; charset=utf-8'
            'body'        = "$markdown"
        }

        $params | ConvertTo-Json
        
        Invoke-RestMethod @params
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      displayName: Create and publish markdown wiki üìö
